import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.emoji import emojize
from aiogram.types.message import ContentType
from aiogram.utils.markdown import italic, text
from aiogram.types import InputMediaPhoto, ChatActions


from config import TOKEN
from functions import parse
import keyboards as kb


logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.MARKDOWN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ö–ü!")


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—Ä—Ç–∫—É–ª —Ç–æ–≤–∞—Ä–∞")


@dp.message_handler(commands=['rm'])
async def process_rm_command(message: types.Message):
    await message.reply("–£–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π",
                        reply_markup=kb.ReplyKeyboardRemove())


@dp.message_handler(commands=['activate'])
async def process_start_command(message: types.Message):
    await message.reply("–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑",
                        reply_markup=kb.greet_kb1)


@dp.message_handler(commands=["geophone"])
async def geophone(message):
    # –≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –ø—Ä–æ—Å—Ç–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                        request_contact=True)
    button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                                      request_location=True)
    keyboard.add(button_phone, button_geo)
    await bot.send_message(message.chat.id,
                           "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å "
                           "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º, –∂–∞–ª–∫–∏–π —á–µ–ª–æ–≤–µ—á–∏—à–∫–∞!",
                           reply_markup=keyboard)


@dp.message_handler(commands=['1'])
async def process_command_1(message: types.Message):
    await message.reply("–ü–µ—Ä–≤–∞—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞", reply_markup=kb.inline_kb1)


@dp.callback_query_handler(lambda c: c.data == 'count')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           '–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!')


# @dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn'))
# async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
#     code = callback_query.data[-1]
#     if code.isdigit():
#         code = int(code)
#     if code == 2:
#         await bot.answer_callback_query(callback_query.id,
#                                         text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
#     elif code == 5:
#         await bot.answer_callback_query(
#             callback_query.id,
#             text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n'
#                  '–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ',
#             show_alert=True)
#     else:
#         await bot.answer_callback_query(callback_query.id)
#     await bot.send_message(callback_query.from_user.id,
#                            f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')


# @dp.message_handler(commands=['2'])
# async def process_command_2(message: types.Message):
#     await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏",
#                         reply_markup=kb.inline_kb_full)


@dp.message_handler(content_types=ContentType.ANY)
async def echo(message: types.Message):
    if message.text == '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑':
        await message.reply('–í–≤–µ–¥–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)')
    elif message.text.isdigit():
        if len(message.text) % 6 == 0:
            answer, images = parse(message.text)

            media = [InputMediaPhoto(images[0],
                                     answer)]

            for img in images[1:]:
                media.append(InputMediaPhoto(img))

            await bot.send_chat_action(message.from_user.id,
                                       ChatActions.TYPING)

            await bot.send_media_group(message.from_user.id,
                                       media,
                                       reply_to_message_id=message.message_id,
                                       )

            await message.reply('–¶–µ–Ω–∞, –∫–æ–ª-–≤–æ?',
                                reply_markup=kb.inline_kb1,
                                )
    else:
        message_text = text(
            emojize('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å :astonished:'),
            italic('\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é,'), '—á—Ç–æ –µ—Å—Ç—å', '/help')
        await message.reply(message_text)


if __name__ == '__main__':
    executor.start_polling(dp)
